import Foundation

// Generated by Supernova - do not modify manually

{[ global CURRENT_TYPE = "Radius" /]}
{[ const measureBehavior = getBehavior("measure") /]}
{[ const behavior = getBehavior(CURRENT_TYPE) /]}
{[ let brand = ds.currentBrand() /]}
{[ const tokens = ds.tokensByType(CURRENT_TYPE, brand.id) /]}

public extension Tokens {
    enum BorderRadius: CaseIterable, TokenType, Identifiable {
{[ for token in tokens ]}
    {[ if @is.equals(token.name, "default") ]}
        case `{{ token }}`
    {[ else ]}
        case {{ token.name }}
    {[/]}
{[/]}
    }
}


{* extension View {  
    {[ let brand = ds.currentBrand() /]}
    {[ for group in ds.tokenGroupsOfType("Radius", brand.id) ]}
    {[ const tokens = ds.tokensByGroupId(group.id) /]}
    {[ if !(tokens.count() === 0 && group.subgroups.count() === 0) ]}
    {[ if !group.isRoot ]}

    // {{ group.name }}
    {[/]}
    {[ for token in tokens ]}

    {[ if (token.description && token.description.count() > 0) ]}
    {{ createDocumentationComment(token.description, "    ") }}
    {[/]}
    func border{[ inject "token_func_name" context this /]}() -> some View {
        return self.cornerRadius({{ token.value.radius.measure }}) 
    }
    {[/]}
    {[/]}
    {[/]}
} *}
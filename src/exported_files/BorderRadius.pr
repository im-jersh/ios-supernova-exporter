import Foundation

// Generated by Supernova - do not modify manually

{[ global CURRENT_TYPE = "Radius" /]}
{[ const measureBehavior = getBehavior("measure") /]}
{[ const behavior = getBehavior(CURRENT_TYPE) /]}
{[ let brand = ds.currentBrand() /]}
{[ const tokens = ds.tokensByType(CURRENT_TYPE, brand.id) /]}

public extension Tokens {
    enum BorderRadius: CaseIterable, TokenType, Identifiable {
{[ for token in tokens ]}
    {[ if token.name.equals("default") ]}
        case `{{ token.name }}`
    {[ else ]}
        case {{ token.name }}
    {[/]}
{[/]}
    }
}

public extension Tokens.BorderRadius {
    var id: Double { rawValue }

    var rawValue: Double {
        switch self {
{[ for token in tokens ]}
    {[ if token.name.equals("circle") ]}
        case .{{ token.name }}: return .infinity
    {[ else ]}
        case .{{ token.name }}: return {{ token.value.radius.measure }}
    {[/]}
{[/]}
        }
    }
}